
services:

  mongodb:
    image: mongo:latest
    container_name: emp-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: Employees
    volumes:
      - emp_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - kafka_network

  employeeproducer.api:
    image: ${DOCKER_REGISTRY-}employeeproducerapi
    build:
      context: .
      dockerfile: Services/Producer/EmployeeProducer.API/Dockerfile
    networks:
      - kafka_network

   # zookeeper:
  #   image: docker.io/bitnami/zookeeper:3.9.1
  #   # to survive the container restart
  #   tmpfs: "/zktmp"
  #   environment:
  #     ALLOW_ANONYMOUS_LOGIN: 'yes'
  #   ports:
  #     - "2181:2181"
  #   volumes:
  #     - "zookeeper_data:/bitnami"
  #   networks:
  #     - kafka_network

  # kafka1:
  #   image: docker.io/bitnami/kafka:3.7.0
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "9094:9094"
  #   environment:
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092,EXTERNAL://kafka1:9094
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   volumes:
  #     - "kafka_data:/bitnami"
  #   networks:
  #     - kafka_network

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # kafka1:
  #   image: confluentinc/cp-server:7.5.0
  #   hostname: kafka1
  #   container_name: kafka1
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
  #     KAFKA_MIN_INSYNC_REPLICAS: 1
  #   networks:
  #     - kafka_network
  # kafka1:
  #   image: obsidiandynamics/kafka
  #   restart: "no"
  #   ports:
  #     - "2181:2181"
  #     - "9092:9092"
  #   environment:
  #     KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka1:29092,EXTERNAL://localhost:9092"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT, PLAINTEXT:PLAINTEXT"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
  #     KAFKA_RESTART_ATTEMPTS: "10"
  #     KAFKA_RESTART_DELAY: "5"
  #     ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  #   networks:
  #     - kafka_network

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: "no"
  #   container_name: kafdrop
  #   networks: 
  #     - kafka_network
  #   depends_on:
  #     - kafka1
  #   ports:
  #     - 9000:9000
  #   environment:
  #     KAFKA_BROKERCONNECT: kafka1:29092

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   depends_on:
  #     - kafka1
  #   ports:
  #     - 9100:8080
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #     KAFKA_CLUSTERS_0_JMXPORT: 9101
  #   networks:
  #     - kafka_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - kafka_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    networks:
      - kafka_network
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://broker:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - kafka_network
    depends_on: 
      - broker
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=broker
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  

  conusmer.service:
    image: ${DOCKER_REGISTRY-}conusmerservice
    build:
      context: .
      dockerfile: Services/Consumer/Conusmer.Service/Dockerfile
    networks:
      - kafka_network
    depends_on:
      - mongodb

  elasticsearch:
    container_name: elks
    image: elasticsearch:8.15.0
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - kafka_network

  kibana:
    container_name: kibana
    image: kibana:8.15.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  emp_data:
    driver: local
  elasticsearch-data:
    driver: local

